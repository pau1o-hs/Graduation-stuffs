import javax.swing.JOptionPane;
import javax.swing.JPanel;

/**
* Esta classe representa a mesa do jogo e é responsável por avaliar a mão do jogador,
* identificar combinações e distribuir o prêmio da rodada
* @author Victor e Paulo
*/
public class Table {
        /**
        * Avaliador da mão do jogador.
        * @param hand String com a mão do jogador.
        * @param bet Valor da aposta.
        * @return Resultado da aposta (valor da mão) e string com a avaliação da mão.
        */
        public int hasHand(String[] hand, int bet, JPanel panel) {
                
                int[][] card = new int[15][4];   
                
                boolean pair = false;
                boolean trinc = false;
                boolean flush = false;
                int straight = 0; // 0 = Not Initialized; 1 = Initialized; 2 = NOT A SEQUENCE

                // SEND CARDS TO MATRIX
                for (int i = 0; i < 5; i++) {

                        String[] _str = hand[i].split(" ");
                        
                        int cardNumber = Integer.parseInt(_str[0]);
                        int cardSuit = 0;
                        
                        if (_str[1].equals("clubs")) cardSuit = 0;
                        else if (_str[1].equals("diamonds")) cardSuit = 1;
                        else if (_str[1].equals("hearts")) cardSuit = 2;
                        else if (_str[1].equals("spades")) cardSuit = 3;

                        card[cardNumber][cardSuit]++;
                }
                
                int cardCount = 0;
                
                // ITERATE NUMBERS
                for (int i = 2; i < 15; i++){
                        
                        if (cardCount == 5) break;
                        int numAmount = 0;

                        // ITERATE SUITS
                        for (int j = 0; j < 4; j++) {

                                if (card[i][j] == 1) {

                                        numAmount++;
                                        cardCount++;
                                }
                        }

                        if (numAmount == 2) { 
                                if (pair) return result("DOIS PARES", bet);                    // TWO PAIR
                                if (trinc) return result("FULL HOUSE", bet * 20);          // FULL HOUSE
                                pair = true;
                        }
                        else if (numAmount == 3) {
                                if (pair) return result("FULL HOUSE", bet * 20);                // FULL HOUSE
                                trinc = true;
                        }
                        else if (numAmount == 4) return result("QUADRA", bet * 50);            // QUADRA

                        if (numAmount == 1 && straight != 2) straight = 1;
                        else if (numAmount > 1) straight = 2;

                        if (numAmount == 0 && cardCount < 5 && straight == 1) straight = 2;
                }

                if (pair) return result("DERROTA", -bet);
                if (trinc) return result("TRINCA", bet * 2);
                cardCount = 0;
                
                // ITERATE SUITS
                for(int i = 0; i < 4; i++){

                        if (cardCount == 5) break;
                        int numAmount = 0;

                        // ITERATE NUMBERS
                        for (int j = 2; j < 15; j++){
                                
                                if (cardCount == 5) break;
                                if (card[j][i] == 1) {
                                        numAmount++;
                                        cardCount++;
                                }               
                        }
                        if(numAmount == 5){
                                flush = true;
                                break;
                        }
                }

                if (flush) {
                        if (straight == 1) {
                                
                                for (int i = 0; i < 5; i++) {
                                        String[] _str = hand[i].split(" ");
                                        if(Integer.parseInt(_str[0]) == 10) return result("ROYAL STRAIGHT FLUSH", bet * 200); // STRAIGHT FLUSH   
                                }
                                return result("STRAIGHT FLUSH", bet * 100);             
                        }
                        else return result("FLUSH", bet * 10);
                }
                else if (straight == 1) return result("STRAIGHT", bet * 5);
                
                return result("DERROTA", -bet);
        }
        /**
        * Imprime o resultado de forma didática.
        * @param str Mão do jogador avaliada
        * @param value Valor da aposta.
        * @return Resultado da mão de forma didática.
        */
        public int result(String str, int value) {

                System.out.print("\nVocê conseguiu um(a): " + str + " [" + value + "]\n");
                JOptionPane.showMessageDialog(panel, "\nVocê conseguiu um(a): \" + str + \" [\" + value + \"]\n");

                return value;
        }
}